import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

/**
 * Для заданного целочисленного массива numsвозвращайте значение,
 * true если какое-либо значение встречается в массиве не менее двух раз false ,
 * и возвращайте значение , если все элементы различны. *
 *
 * Пример 1:
 *
 * Ввод: nums = [1,2,3,1]
 *  Вывод: правда
 * Пример 2:
 *
 * Ввод: nums = [1,2,3,4]
 *  Вывод: ложь
 * Пример 3:
 *
 * Ввод: nums = [1,1,1,3,3,4,3,2,4,2]
 *  Вывод: правда
 */

/**
 * Данный код проверяет, содержит ли массив повторяющиеся элементы. Он использует структуру данных HashSet для эффективного хранения и проверки уникальности элементов.
 *
 * Подход
 * Проверьте, является ли входной массив нулевым или пустым. Если это так, верните false, так как нет элементов для сравнения.
 * Создайте HashSet с именем «set» для хранения уникальных элементов.
 * Перебрать каждый элемент «i» во входном массиве.
 * Для каждого элемента проверьте, можно ли его добавить в набор с помощью метода add. Если его нельзя добавить (это означает, что он уже существует в наборе), верните true, чтобы указать наличие дубликата.
 * Если цикл завершится без обнаружения дубликатов, верните false, чтобы указать, что дубликаты не найдены.
 * Сложность
 * Временная сложность:
 * Временная сложность этого решения равна O(n), где n — количество элементов во входном массиве. Код выполняет итерацию по каждому элементу один раз и выполняет операции с постоянным временем (добавление элементов в набор и проверку существования) над HashSet.
 *
 * Сложность пространства:
 * Пространственная сложность также O(n). В худшем случае, если все элементы массива уникальны, HashSet сохранит все n элементов. Следовательно, использование пространства пропорционально количеству элементов во входном массиве.
 */

public class ContainsDuplicate {
    public static void main(String[] args) {
        int[]arr = {1,2,3,1};
        System.out.println(containsDuplicate(arr));
    }

    public static boolean containsDuplicate(int[] nums) {

        Set<Integer> sets = new HashSet<>();
        for (int value : nums) {
            //если не могу добавить элемент, то такой уже есть
            if (!sets.add(value)) {
                return true;
            }
        }
        return false;
    }
}
