package leedCode;

import java.util.Stack;
/*Реализуйте очередь «первым пришел – первым обслужен» (FIFO), используя только два стека. Реализованная очередь должна поддерживать все функции обычной очереди ( push, peek, popи empty).

Реализовать MyQueueкласс:

void push(int x)Помещает элемент x в конец очереди.
int pop()Удаляет элемент из начала очереди и возвращает его.
int peek()Возвращает элемент в начале очереди.
boolean empty()Возвращает true, если очередь пуста, falseиначе.
Заметки:

Вы должны использовать только стандартные операции стека, что означает,
 что допустимы только операции push to top, peek/pop from top, sizeи .is empty
В зависимости от вашего языка стек может не поддерживаться изначально.
Вы можете имитировать стек, используя список или двухстороннюю очередь (двухстороннюю очередь), если вы используете только стандартные операции стека.

Пример 1:
Вход
["MyQueue", "push", "push", "peek", "pop", "пусто"]
[[], [1], [2], [], [], []]
Выход
[ноль, ноль, ноль, 1, 1, ложь]

Объяснение
МояОчередь мояОчередь = новая МояОчередь();
моя очередь.push(1); // очередь: [1]
моя очередь.push(2); // очередь: [1, 2] (самая левая перед очередью)
моя очередь.пик(); // вернуть 1
мояОчередь.поп(); // возвращаем 1, очередь [2]
моя очередь.пусто(); // вернуть ложь

Ограничения:
1 <= x <= 9
В большинстве 100 случаев звонки будут совершаться на push, pop, peekи empty.
Все вызовы pop() peek() действительны.

Дополнение: можете ли вы реализовать очередь так,
чтобы каждая операция была амортизированной O(1) по времени сложности?
Другими словами, выполнение nопераций займет общее O(n)время, даже если одна из этих операций может занять больше времени.*/
public class MyQueue {
    Stack<Integer> in;
    Stack<Integer> out;

    public MyQueue() {
        this.in = new Stack<>();
        this.out = new Stack<>();
    }

    public void push(int x) {
        in.push(x);
    }

    public int pop() {
        peek();
        return out.pop();
    }

    public int peek() {
        if (out.empty()) {
            while (!in.empty()) {
                out.push(in.pop());
            }
        }
        return out.peek();
    }

    public boolean empty() {
        return in.empty() && out.empty();
    }

    /**
     * Your MyQueue object will be instantiated and called as such:
     * MyQueue obj = new MyQueue();
     * obj.push(x);
     * int param_2 = obj.pop();
     * int param_3 = obj.peek();
     * boolean param_4 = obj.empty();
     */
}

